#ifndef MCNPTALLY_HXX
#define MCNPTALLY_HXX

#include <list>
#include <McnpParticleType.hxx>
#include <McnpMeshGeometryType.hxx>

using namespace std;

/*
    MCNP Tally Class
    This class is a container for Mesh Tally data generated by McCad.
    A Tally
        - has a Tally Number
        - may contain multiply energy bins
        - may contain multiply X-, Y-, Z-bins
    It allows the multiplication of all data values with a given factor (normalization).
*/


class McnpTally
{
public:
    // only default constructor
    McnpTally();
    ~McnpTally();

    // inline functions

    inline void SetTallyNumber(const int tallyNumber) {myTallyNumber = tallyNumber;}
    inline int  GetTallyNumber() const {return myTallyNumber;}

    inline void SetParticleType(McnpParticleType type) {myParticleType = type;}
    inline McnpParticleType GetParticleType() const {return myParticleType;}

    inline void AddXBinTick(float val) {myXBins.push_back(val);}
    inline void AddYBinTick(float val) {myYBins.push_back(val);}
    inline void AddZBinTick(float val) {myZBins.push_back(val);}
    inline void AddEnergyTick(float val) {myEnergyBins.push_back(val);}

    inline int XDimension() const {return myXBins.size();}
    inline int YDimension() const {return myYBins.size();}
    inline int ZDimension() const {return myZBins.size();}
    inline int EnergyDimension() const {return myEnergyBins.size();} // -1, because

    inline void SetMeshFormat(McnpMeshFormat format) {myMeshFormat = format;}
    inline McnpMeshFormat GetMeshFormat() const {return myMeshFormat;}

    inline void SetMeshGeometry(McnpMeshGeometry geometry) {myMeshGeometry = geometry;}
    inline McnpMeshGeometry GetMeshGeometry() const {return myMeshGeometry;}

    inline list<float>::const_iterator GetXBinBegin(){ return myXBins.begin(); }
    inline list<float>::const_iterator GetYBinBegin(){ return myYBins.begin(); }
    inline list<float>::const_iterator GetZBinBegin(){ return myZBins.begin(); }
    inline list<float>::const_iterator GetXBinEnd(){ return myXBins.end(); }
    inline list<float>::const_iterator GetYBinEnd(){ return myYBins.end(); }
    inline list<float>::const_iterator GetZBinEnd(){ return myZBins.end(); }


    // set and get functions for values and errors

    void SetValue(int energyBin, int xBin, int yBin, int zBin, float value);
    float GetValue(int energyBin, int xBin, int ybin, int zBin) const;

    void SetError(int energyBin, int xBin, int yBin, int zBin, float error);
    float GetError(int energyBin, int xBin, int ybin, int zBin) const;

    void Multiply(float factor);

    void InitValueArrays();

    void SetMinVal(float energy, float val);
    float GetMinVal(float energy) const;

    void SetMaxVal(float energy, float val);
    float GetMaxVal(float energy) const;

    float GetEnergyTick(int number) const;


private:

    int Position(int e, int i, int j, int k) const;

    int myTallyNumber;
    McnpParticleType myParticleType;   // Neutron, Photon, Electron
    McnpMeshFormat myMeshFormat;       // IJ, IK, JK, Col, cf
    McnpMeshGeometry myMeshGeometry;   // cartesian, cylindical

    list<float> myEnergyBins;
    list<float> myLowerValueBoundary;
    list<float> myUpperValueBoundary;
    list<float> myXBins;
    list<float> myYBins;
    list<float> myZBins;

    float* myEnergyValueArray;
    float* myEnergyErrorArray;
 
    bool myArraysNotInitialized;

    int myESize, myXSize, myYSize, myZSize;

};

#endif // MCNPTALLY_HXX
